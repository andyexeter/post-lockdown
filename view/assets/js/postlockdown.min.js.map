{"version":3,"sources":["jquery.plmultiselect.js","postlockdown.js"],"names":["$","window","Plugin","element","options","this","$el","extend","$search","inputSearch","$left","ulAvailable","$right","ulSelected","$spinner","spinner","doingAjax","init","pluginName","prototype","self","height","parent","autocomplete","minLength","source","request","queryItems","term","json","renderMenu","data","create","on","is","selectItem","call","ID","closest","remove","find","removeClass","selected","length","scrollHeight","scrollTop","nextPage","val","offset","children","success","addClass","ajax","url","ajaxurl","type","action","ajaxAction","context","isFunction","complete","arg","inputName","isArray","clone","appendTo","attr","menu","items","append","$items","empty","each","i","item","push","getItemTpl","$item","post_title","post_type","fn","plugin","jQuery","selectedKey","plmultiselect","postlockdown"],"mappings":"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","file":"postlockdown.min.js","sourcesContent":["/*!\n\tjquery-plmultiselect v1.0.2\n\tA jQuery multi select plugin for WordPress admin\n\t(c) 2015 Andy Palmer\n\tlicense: http://www.gnu.org/licenses/gpl-2.0.html\n*/\n( function( $, window ) {\n\n\t'use strict';\n\n\tvar pluginName = 'plmultiselect';\n\n\tfunction Plugin( element, options ) {\n\n\t\tthis.$el = $( element );\n\t\tthis.options = $.extend( { }, options );\n\n\t\tthis.$search = this.options.inputSearch;\n\t\tthis.$left = this.options.ulAvailable;\n\t\tthis.$right = this.options.ulSelected;\n\t\tthis.$spinner = this.options.spinner;\n\n\t\tthis.doingAjax = false;\n\n\t\tthis.init( );\n\t}\n\n\tPlugin.prototype = {\n\t\t/**\n\t\t * Initialises the plugin instance.\n\t\t */\n\t\tinit: function( ) {\n\n\t\t\tvar self = this;\n\n\t\t\tthis.$right.height( this.$left.parent( ).height( ) );\n\n\t\t\tthis.$search.autocomplete( {\n\t\t\t\tminLength: 0,\n\t\t\t\tsource: function( request ) {\n\n\t\t\t\t\tself.queryItems( request.term, 0, function( json ) {\n\t\t\t\t\t\tself.renderMenu( self.$left, json.data );\n\t\t\t\t\t} );\n\t\t\t\t},\n\t\t\t\tcreate: function() {\n\t\t\t\t\t$( this ).autocomplete( 'search' );\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t// Attach the click handler for available items\n\t\t\tthis.$left.on( 'click', '> li', function( ) {\n\n\t\t\t\tif ( !$( this ).is( '.selected' ) ) {\n\t\t\t\t\tself.selectItem.call( self, $( this ) );\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t// Attach the click handler for remove buttons on selected items.\n\t\t\tthis.$right.on( 'click', '> li .dashicons-no', function( ) {\n\n\t\t\t\tvar ID = $( this ).closest( 'li' ).data( 'ID' );\n\t\t\t\t$( this ).closest( 'li' ).remove( );\n\t\t\t\tself.$left.find( '.post-' + ID ).removeClass( 'selected' );\n\t\t\t} );\n\n\t\t\t// If we have a list of items add them to the selected menu.\n\t\t\tif ( this.options.selected.length ) {\n\t\t\t\tthis.selectItem( this.options.selected );\n\t\t\t}\n\n\t\t\t// Paginate scrolling of the available items menu.\n\t\t\tthis.$left.on( 'scroll', function( ) {\n\n\t\t\t\t// Go to next page if the scrollbar is 15px or less from the bottom.\n\t\t\t\tif ( this.scrollHeight - $( this ).scrollTop( ) - 15 <= $( this ).height( ) ) {\n\t\t\t\t\tself.nextPage( );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\tnextPage: function( ) {\n\n\t\t\tvar self = this,\n\t\t\t\tterm = this.options.inputSearch.val( ),\n\t\t\t\toffset = this.$left.children( 'li' ).length;\n\n\t\t\tthis.queryItems( term, offset, function( json ) {\n\t\t\t\tself.renderMenu( self.$left, json.data, '', true );\n\t\t\t} );\n\n\t\t},\n\t\t/**\n\t\t * Makes an AJAX request for a list of items.\n\t\t * @param {string} term - The term to query items for.\n\t\t * @param {number} offset - The number of items to pass over.\n\t\t * @param {function} success - If the request is successful this function will be invoked.\n\t\t */\n\t\tqueryItems: function( term, offset, success ) {\n\n\t\t\t// Only allow one AJAX request at a time\n\t\t\tif ( this.doingAjax ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.doingAjax = true;\n\n\t\t\tthis.$spinner.addClass( 'is-active' );\n\n\t\t\t$.ajax( {\n\t\t\t\turl: window.ajaxurl,\n\t\t\t\ttype: 'GET',\n\t\t\t\tdata: {\n\t\t\t\t\taction: this.options.ajaxAction,\n\t\t\t\t\tterm: term,\n\t\t\t\t\toffset: offset\n\t\t\t\t},\n\t\t\t\tcontext: this,\n\t\t\t\tsuccess: function( json ) {\n\n\t\t\t\t\tif ( $.isFunction( success ) ) {\n\t\t\t\t\t\tsuccess.call( this, json );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tthis.doingAjax = false;\n\t\t\t\t\tthis.$spinner.removeClass( 'is-active' );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\t/**\n\t\t * Selects an item by cloning it, or adds an array of plain objects, to the right hand box.\n\t\t * @param {jQuery||object[]} arg - The jQuery object or an array of plain objects.\n\t\t */\n\t\tselectItem: function( arg ) {\n\n\t\t\tvar inputName = this.options.inputName;\n\n\t\t\tif ( $.isArray( arg ) ) {\n\t\t\t\tthis.renderMenu( this.$right, arg, inputName, true );\n\t\t\t} else {\n\n\t\t\t\tinputName += '[' + arg.data( 'ID' ) + ']';\n\n\t\t\t\targ.clone( false )\n\t\t\t\t\t.data( 'ID', arg.data( 'ID' ) )\n\t\t\t\t\t.appendTo( this.$right )\n\t\t\t\t\t.find( 'input.post-id' ).attr( 'name', inputName );\n\n\t\t\t\targ.addClass( 'selected' );\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Fills a menu with a list of items.\n\t\t * @param {jQuery} menu - The menu to fill.\n\t\t * @param {array} items - List of items to add to the menu.\n\t\t * @param {string} inputName - The input name to be passed to getItemTpl().\n\t\t * @param {bool} append - Whether to append to the menu. Setting to false clears the menu's innerHTML first.\n\t\t */\n\t\trenderMenu: function( menu, items, inputName, append ) {\n\n\t\t\tvar self = this,\n\t\t\t\t$items = [ ];\n\n\t\t\tif ( !append ) {\n\t\t\t\tmenu.empty( );\n\t\t\t}\n\n\t\t\t$.each( items, function( i, item ) {\n\t\t\t\t$items.push( self.getItemTpl( item, inputName + '[' + item.ID + ']' ) );\n\t\t\t} );\n\n\t\t\tmenu.append( $items );\n\t\t},\n\t\t/**\n\t\t * Returns a jQuery object of an item to be appended to a menu.\n\t\t * @param {object} item       The item to build a jQuery object with.\n\t\t * @param {string} inputName The hidden input field name.\n\t\t * @returns {jquery} The item as a jQuery object.\n\t\t */\n\t\tgetItemTpl: function( item, inputName ) {\n\n\t\t\tif ( !inputName ) {\n\t\t\t\tinputName = '';\n\t\t\t}\n\n\t\t\tvar $item = $( '<li />' )\n\t\t\t\t.addClass( 'post-' + item.ID )\n\t\t\t\t.data( 'ID', item.ID )\n\t\t\t\t.append( '<span class=\"post-title\">' + item.post_title + '</span>' +\n\t\t\t\t\t'<span class=\"dashicons dashicons-no\" title=\"Remove\"></span>' +\n\t\t\t\t\t'<span class=\"post-type\">' + item.post_type + '</span>' +\n\t\t\t\t\t'<input type=\"hidden\" class=\"post-id\" name=\"' + inputName + '\" value=\"' + item.ID + '\" />'\n\t\t\t\t\t);\n\n\t\t\tif ( this.$right.find( '.post-' + item.ID ).length ) {\n\t\t\t\t$item.addClass( 'selected' );\n\t\t\t}\n\n\t\t\treturn $item;\n\t\t}\n\n\t};\n\n\t$.fn[pluginName] = function( options ) {\n\n\t\treturn this.each( function( ) {\n\t\t\tvar plugin = $( this ).data( pluginName + '.plugin' );\n\t\t\tif ( !plugin ) {\n\n\t\t\t\tplugin = new Plugin( this, options );\n\t\t\t\t$( this ).data( pluginName + '.plugin', plugin );\n\t\t\t}\n\n\t\t} );\n\t};\n\n} )( jQuery, window );\n","( function( $ ) {\n\t'use strict';\n\n\t$( function() {\n\t\t$( '.pl-posts-container' ).each( function() {\n\n\t\t\tvar selectedKey = $( this ).find( '.pl-posts-selected .pl-multiselect' ).data( 'key' ),\n\t\t\t\tinputName = $( this ).find( '.pl-posts-selected .pl-multiselect' ).data( 'input_name' );\n\n\t\t\t$( this ).plmultiselect( {\n\t\t\t\tajaxAction: 'pl_autocomplete',\n\t\t\t\tinputName: inputName,\n\t\t\t\tinputSearch: $( this ).find( '.pl-autocomplete' ),\n\t\t\t\tulAvailable: $( this ).find( '.pl-posts-available .pl-multiselect' ),\n\t\t\t\tulSelected: $( this ).find( '.pl-posts-selected .pl-multiselect' ),\n\t\t\t\tselected: window.postlockdown[ selectedKey ] || [ ],\n\t\t\t\tspinner: $( this ).find( '.spinner' )\n\t\t\t} );\n\t\t} );\n\n\t} );\n} )( jQuery );\n"],"sourceRoot":"src/assets/js/"}